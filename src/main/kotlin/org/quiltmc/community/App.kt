@file:OptIn(PrivilegedIntent::class)

/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.quiltmc.community

import com.kotlindiscord.kord.extensions.ExtensibleBot
import com.kotlindiscord.kord.extensions.modules.extra.mappings.extMappings
import com.kotlindiscord.kord.extensions.utils.env
import com.kotlindiscord.kord.extensions.utils.loadModule
import dev.kord.common.entity.Snowflake
import dev.kord.gateway.Intents
import dev.kord.gateway.PrivilegedIntent
import me.shedaniel.linkie.namespaces.YarnNamespace
import org.koin.dsl.bind
import org.quiltmc.community.modes.quilt.extensions.SyncExtension
import org.quiltmc.community.modes.quilt.extensions.messagelog.MessageLogExtension
import org.quiltmc.community.modes.quilt.extensions.minecraft.MinecraftExtension
import org.quiltmc.community.modes.quilt.extensions.suggestions.JsonSuggestions
import org.quiltmc.community.modes.quilt.extensions.suggestions.SuggestionsData
import org.quiltmc.community.modes.quilt.extensions.suggestions.SuggestionsExtension

@Suppress("MagicNumber", "UnderscoresInNumericLiterals")
private val NON_YARN_CHANNEL = Snowflake(
    env("NON_YARN_CHANNEL_ID")?.toLong() ?: 856825412695883796
)

val MODE = env("MODE")?.lowercase() ?: "quilt"

suspend fun setupCollab() = ExtensibleBot(TOKEN) {
    messageCommands {
        defaultPrefix = "?"

        check {
            if (event.message.author == null) {
                fail()
            }
        }
    }

    slashCommands {
        enabled = true
    }

    extensions {
        sentry {
            enable = false
        }
    }
}

suspend fun setupQuilt() = ExtensibleBot(TOKEN) {
    intents {
        +Intents.all
    }

    members {
        all()
    }

    messageCommands {
        defaultPrefix = "?"

        check {
            if (event.message.author == null) {
                fail()
            }
        }
    }

    slashCommands {
        enabled = true
    }

    extensions {
        sentry {
            enable = false
        }

        add(::MessageLogExtension)
        add(::MinecraftExtension)
        add(::SuggestionsExtension)
        add(::SyncExtension)

        extMappings {
            namespaceCheck { namespace ->
                {
                    failIfNot("Non-Yarn commands may only be run in <#${NON_YARN_CHANNEL.value}>") {
                        namespace == YarnNamespace ||
                                event.message.getGuildOrNull() == null ||
                                event.message.channelId == NON_YARN_CHANNEL
                    }
                }
            }
        }
    }

    hooks {
        afterKoinSetup {
            val suggestions = JsonSuggestions()
            suggestions.load()

            loadModule { single { suggestions } bind SuggestionsData::class }
        }
    }
}

suspend fun setupShowcase() = ExtensibleBot(TOKEN) {
    messageCommands {
        defaultPrefix = "?"

        check {
            if (event.message.author == null) {
                fail()
            }
        }
    }

    slashCommands {
        enabled = true
    }

    extensions {
        sentry {
            enable = false
        }
    }
}

suspend fun main() {
    val bot = when (MODE) {
        "collab" -> setupCollab()
        "quilt" -> setupQuilt()
        "showcase" -> setupShowcase()

        else -> error("Invalid mode: $MODE")
    }

    bot.start()
}
